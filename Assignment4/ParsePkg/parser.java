
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Mar 08 23:42:24 CST 2017
//----------------------------------------------------

package ParsePkg;

import java_cup.runtime.*;
import AbstractSyntaxPkg.*;
import VisitorPkg.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Mar 08 23:42:24 CST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\004\000\002\002\005\000\002\003" +
    "\005\000\002\003\002\000\002\006\005\000\002\006\007" +
    "\000\002\007\003\000\002\007\003\000\002\004\004\000" +
    "\002\004\002\000\002\010\014\000\002\011\003\000\002" +
    "\011\002\000\002\005\003\000\002\005\004\000\002\012" +
    "\003\000\002\012\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\007\000\002\013\005\000\002\013\003\000" +
    "\002\013\004\000\002\013\003\000\002\014\003\000\002" +
    "\014\005\000\002\016\003\000\002\016\005\000\002\021" +
    "\005\000\002\015\003\000\002\015\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\004\000\002\017\005\000\002\017\005" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\020\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\145\000\020\010\005\033\ufffe\035\ufffe\040\ufffe\045" +
    "\ufffe\046\ufffe\051\ufffe\001\002\000\016\033\ufff8\035\ufff8" +
    "\040\ufff8\045\ufff8\046\ufff8\051\ufff8\001\002\000\004\045" +
    "\010\001\002\000\004\002\007\001\002\000\004\002\001" +
    "\001\002\000\004\016\021\001\002\000\006\011\013\012" +
    "\012\001\002\000\004\045\014\001\002\000\016\033\uffff" +
    "\035\uffff\040\uffff\045\uffff\046\uffff\051\uffff\001\002\000" +
    "\004\016\015\001\002\000\006\047\020\050\017\001\002" +
    "\000\010\011\ufffc\012\ufffc\053\ufffc\001\002\000\010\011" +
    "\ufffa\012\ufffa\053\ufffa\001\002\000\010\011\ufffb\012\ufffb" +
    "\053\ufffb\001\002\000\006\047\020\050\017\001\002\000" +
    "\010\011\ufffd\012\ufffd\053\ufffd\001\002\000\016\033\037" +
    "\035\031\040\036\045\034\046\027\051\025\001\002\000" +
    "\030\002\ufff2\017\146\033\ufff2\034\ufff2\035\ufff2\036\ufff2" +
    "\040\ufff2\043\ufff2\045\ufff2\046\ufff2\052\ufff2\001\002\000" +
    "\006\045\010\053\ufff5\001\002\000\020\002\ufff4\033\ufff4" +
    "\035\ufff4\040\ufff4\045\ufff4\046\ufff4\052\ufff4\001\002\000" +
    "\016\006\050\026\046\031\041\032\042\044\040\045\045" +
    "\001\002\000\016\002\000\033\037\035\031\040\036\045" +
    "\034\046\027\001\002\000\016\006\050\026\046\031\041" +
    "\032\042\044\040\045\045\001\002\000\030\002\uffea\017" +
    "\uffea\033\uffea\034\uffea\035\uffea\036\uffea\040\uffea\043\uffea" +
    "\045\uffea\046\uffea\052\uffea\001\002\000\016\033\ufff9\035" +
    "\ufff9\040\ufff9\045\ufff9\046\ufff9\051\ufff9\001\002\000\010" +
    "\012\uffe9\041\uffe9\053\107\001\002\000\006\012\120\041" +
    "\121\001\002\000\030\002\uffec\017\uffec\033\uffec\034\uffec" +
    "\035\uffec\036\uffec\040\uffec\043\uffec\045\uffec\046\uffec\052" +
    "\uffec\001\002\000\016\006\050\026\046\031\041\032\042" +
    "\044\040\045\045\001\002\000\072\002\uffd2\004\uffd2\005" +
    "\uffd2\007\uffd2\011\uffd2\012\uffd2\013\uffd2\015\uffd2\017\uffd2" +
    "\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\027" +
    "\uffd2\030\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2" +
    "\040\uffd2\042\uffd2\043\uffd2\045\uffd2\046\uffd2\052\uffd2\001" +
    "\002\000\072\002\uffd4\004\uffd4\005\uffd4\007\uffd4\011\uffd4" +
    "\012\uffd4\013\uffd4\015\uffd4\017\uffd4\020\uffd4\021\uffd4\022" +
    "\uffd4\023\uffd4\024\uffd4\025\uffd4\027\uffd4\030\uffd4\033\uffd4" +
    "\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\042\uffd4\043" +
    "\uffd4\045\uffd4\046\uffd4\052\uffd4\001\002\000\072\002\uffd3" +
    "\004\uffd3\005\uffd3\007\uffd3\011\uffd3\012\uffd3\013\uffd3\015" +
    "\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\027\uffd3\030\uffd3\033\uffd3\034\uffd3\035\uffd3\036" +
    "\uffd3\037\uffd3\040\uffd3\042\uffd3\043\uffd3\045\uffd3\046\uffd3" +
    "\052\uffd3\001\002\000\072\002\uffd0\004\uffd0\005\uffd0\007" +
    "\uffd0\011\uffd0\012\uffd0\013\uffd0\015\uffd0\017\uffd0\020\uffd0" +
    "\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\027\uffd0\030" +
    "\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0" +
    "\042\uffd0\043\uffd0\045\uffd0\046\uffd0\052\uffd0\001\002\000" +
    "\006\034\115\043\116\001\002\000\074\002\uffd1\004\uffd1" +
    "\005\uffd1\007\uffd1\011\uffd1\012\uffd1\013\uffd1\015\uffd1\017" +
    "\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1" +
    "\027\uffd1\030\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037" +
    "\uffd1\040\uffd1\042\uffd1\043\uffd1\045\uffd1\046\uffd1\052\uffd1" +
    "\053\107\001\002\000\016\006\050\026\046\031\041\032" +
    "\042\044\040\045\045\001\002\000\034\004\060\005\064" +
    "\013\054\015\062\020\067\021\065\022\061\023\057\024" +
    "\056\025\055\027\053\030\066\042\104\001\002\000\016" +
    "\006\050\026\046\031\041\032\042\044\040\045\045\001" +
    "\002\000\010\034\uffe7\036\uffe7\043\uffe7\001\002\000\034" +
    "\004\060\005\064\007\063\013\054\015\062\020\067\021" +
    "\065\022\061\023\057\024\056\025\055\027\053\030\066" +
    "\001\002\000\016\006\050\026\046\031\041\032\042\044" +
    "\040\045\045\001\002\000\016\006\050\026\046\031\041" +
    "\032\042\044\040\045\045\001\002\000\016\006\050\026" +
    "\046\031\041\032\042\044\040\045\045\001\002\000\016" +
    "\006\050\026\046\031\041\032\042\044\040\045\045\001" +
    "\002\000\016\006\050\026\046\031\041\032\042\044\040" +
    "\045\045\001\002\000\016\006\050\026\046\031\041\032" +
    "\042\044\040\045\045\001\002\000\016\006\050\026\046" +
    "\031\041\032\042\044\040\045\045\001\002\000\016\006" +
    "\050\026\046\031\041\032\042\044\040\045\045\001\002" +
    "\000\072\002\uffde\004\uffde\005\uffde\007\uffde\011\uffde\012" +
    "\uffde\013\uffde\015\uffde\017\uffde\020\uffde\021\uffde\022\uffde" +
    "\023\uffde\024\uffde\025\uffde\027\uffde\030\uffde\033\uffde\034" +
    "\uffde\035\uffde\036\uffde\037\uffde\040\uffde\042\uffde\043\uffde" +
    "\045\uffde\046\uffde\052\uffde\001\002\000\016\006\050\026" +
    "\046\031\041\032\042\044\040\045\045\001\002\000\016" +
    "\006\050\026\046\031\041\032\042\044\040\045\045\001" +
    "\002\000\016\006\050\026\046\031\041\032\042\044\040" +
    "\045\045\001\002\000\016\006\050\026\046\031\041\032" +
    "\042\044\040\045\045\001\002\000\056\002\uffda\004\uffda" +
    "\005\uffda\007\uffda\011\uffda\012\uffda\013\uffda\015\uffda\017" +
    "\uffda\027\053\030\066\033\uffda\034\uffda\035\uffda\036\uffda" +
    "\037\uffda\040\uffda\042\uffda\043\uffda\045\uffda\046\uffda\052" +
    "\uffda\001\002\000\070\002\uffd5\004\uffd5\005\uffd5\007\uffd5" +
    "\011\uffd5\012\uffd5\013\uffd5\015\uffd5\017\uffd5\020\uffd5\021" +
    "\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\027\uffd5\033\uffd5" +
    "\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\042\uffd5\043" +
    "\uffd5\045\uffd5\046\uffd5\052\uffd5\001\002\000\056\002\uffd8" +
    "\004\uffd8\005\uffd8\007\uffd8\011\uffd8\012\uffd8\013\uffd8\015" +
    "\uffd8\017\uffd8\027\053\030\066\033\uffd8\034\uffd8\035\uffd8" +
    "\036\uffd8\037\uffd8\040\uffd8\042\uffd8\043\uffd8\045\uffd8\046" +
    "\uffd8\052\uffd8\001\002\000\072\002\uffe0\004\060\005\uffe0" +
    "\007\uffe0\011\uffe0\012\uffe0\013\054\015\uffe0\017\uffe0\020" +
    "\067\021\065\022\061\023\057\024\056\025\055\027\053" +
    "\030\066\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040" +
    "\uffe0\042\uffe0\043\uffe0\045\uffe0\046\uffe0\052\uffe0\001\002" +
    "\000\072\002\uffdf\004\060\005\uffdf\007\uffdf\011\uffdf\012" +
    "\uffdf\013\054\015\uffdf\017\uffdf\020\067\021\065\022\061" +
    "\023\057\024\056\025\055\027\053\030\066\033\uffdf\034" +
    "\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\042\uffdf\043\uffdf" +
    "\045\uffdf\046\uffdf\052\uffdf\001\002\000\056\002\uffdd\004" +
    "\uffdd\005\uffdd\007\uffdd\011\uffdd\012\uffdd\013\uffdd\015\uffdd" +
    "\017\uffdd\027\053\030\066\033\uffdd\034\uffdd\035\uffdd\036" +
    "\uffdd\037\uffdd\040\uffdd\042\uffdd\043\uffdd\045\uffdd\046\uffdd" +
    "\052\uffdd\001\002\000\072\002\uffe2\004\uffe2\005\uffe2\007" +
    "\uffe2\011\uffe2\012\uffe2\013\uffe2\015\uffe2\017\uffe2\020\067" +
    "\021\065\022\061\023\057\024\056\025\055\027\053\030" +
    "\066\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2" +
    "\042\uffe2\043\uffe2\045\uffe2\046\uffe2\052\uffe2\001\002\000" +
    "\056\002\uffdc\004\uffdc\005\uffdc\007\uffdc\011\uffdc\012\uffdc" +
    "\013\uffdc\015\uffdc\017\uffdc\027\053\030\066\033\uffdc\034" +
    "\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\042\uffdc\043\uffdc" +
    "\045\uffdc\046\uffdc\052\uffdc\001\002\000\056\002\uffd9\004" +
    "\uffd9\005\uffd9\007\uffd9\011\uffd9\012\uffd9\013\uffd9\015\uffd9" +
    "\017\uffd9\027\053\030\066\033\uffd9\034\uffd9\035\uffd9\036" +
    "\uffd9\037\uffd9\040\uffd9\042\uffd9\043\uffd9\045\uffd9\046\uffd9" +
    "\052\uffd9\001\002\000\056\002\uffdb\004\uffdb\005\uffdb\007" +
    "\uffdb\011\uffdb\012\uffdb\013\uffdb\015\uffdb\017\uffdb\027\053" +
    "\030\066\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040" +
    "\uffdb\042\uffdb\043\uffdb\045\uffdb\046\uffdb\052\uffdb\001\002" +
    "\000\072\002\uffe1\004\uffe1\005\uffe1\007\uffe1\011\uffe1\012" +
    "\uffe1\013\uffe1\015\uffe1\017\uffe1\020\067\021\065\022\061" +
    "\023\057\024\056\025\055\027\053\030\066\033\uffe1\034" +
    "\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\042\uffe1\043\uffe1" +
    "\045\uffe1\046\uffe1\052\uffe1\001\002\000\070\002\uffd6\004" +
    "\uffd6\005\uffd6\007\uffd6\011\uffd6\012\uffd6\013\uffd6\015\uffd6" +
    "\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025" +
    "\uffd6\030\066\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6" +
    "\040\uffd6\042\uffd6\043\uffd6\045\uffd6\046\uffd6\052\uffd6\001" +
    "\002\000\014\033\037\035\031\040\036\045\034\046\027" +
    "\001\002\000\010\034\uffe5\036\uffe5\043\uffe5\001\002\000" +
    "\072\002\uffd7\004\uffd7\005\uffd7\007\uffd7\011\uffd7\012\uffd7" +
    "\013\uffd7\015\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023" +
    "\uffd7\024\uffd7\025\uffd7\027\053\030\066\033\uffd7\034\uffd7" +
    "\035\uffd7\036\uffd7\037\uffd7\040\uffd7\042\uffd7\043\uffd7\045" +
    "\uffd7\046\uffd7\052\uffd7\001\002\000\016\006\050\026\046" +
    "\031\041\032\042\044\040\045\045\001\002\000\006\011" +
    "\113\012\112\001\002\000\064\002\uffe4\004\060\005\064" +
    "\011\uffe4\012\uffe4\013\054\015\062\017\uffe4\020\067\021" +
    "\065\022\061\023\057\024\056\025\055\027\053\030\066" +
    "\033\uffe4\034\uffe4\035\uffe4\036\uffe4\040\uffe4\043\uffe4\045" +
    "\uffe4\046\uffe4\052\uffe4\001\002\000\016\006\050\026\046" +
    "\031\041\032\042\044\040\045\045\001\002\000\072\002" +
    "\uffcf\004\uffcf\005\uffcf\007\uffcf\011\uffcf\012\uffcf\013\uffcf" +
    "\015\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024" +
    "\uffcf\025\uffcf\027\uffcf\030\uffcf\033\uffcf\034\uffcf\035\uffcf" +
    "\036\uffcf\037\uffcf\040\uffcf\042\uffcf\043\uffcf\045\uffcf\046" +
    "\uffcf\052\uffcf\001\002\000\064\002\uffe3\004\060\005\064" +
    "\011\uffe3\012\uffe3\013\054\015\062\017\uffe3\020\067\021" +
    "\065\022\061\023\057\024\056\025\055\027\053\030\066" +
    "\033\uffe3\034\uffe3\035\uffe3\036\uffe3\040\uffe3\043\uffe3\045" +
    "\uffe3\046\uffe3\052\uffe3\001\002\000\030\002\uffed\017\uffed" +
    "\033\uffed\034\uffed\035\uffed\036\uffed\040\uffed\043\uffed\045" +
    "\uffed\046\uffed\052\uffed\001\002\000\016\006\050\026\046" +
    "\031\041\032\042\044\040\045\045\001\002\000\010\034" +
    "\uffe6\036\uffe6\043\uffe6\001\002\000\004\045\123\001\002" +
    "\000\016\006\050\026\046\031\041\032\042\044\040\045" +
    "\045\001\002\000\032\002\ufff0\012\112\017\ufff0\033\ufff0" +
    "\034\ufff0\035\ufff0\036\ufff0\040\ufff0\043\ufff0\045\ufff0\046" +
    "\ufff0\052\ufff0\001\002\000\006\012\uffe8\041\uffe8\001\002" +
    "\000\006\036\131\043\116\001\002\000\036\004\060\005" +
    "\064\013\054\015\062\020\067\021\065\022\061\023\057" +
    "\024\056\025\055\027\053\030\066\037\126\042\104\001" +
    "\002\000\014\033\037\035\031\040\036\045\034\046\027" +
    "\001\002\000\004\036\130\001\002\000\030\002\uffee\017" +
    "\uffee\033\uffee\034\uffee\035\uffee\036\uffee\040\uffee\043\uffee" +
    "\045\uffee\046\uffee\052\uffee\001\002\000\030\002\uffef\017" +
    "\uffef\033\uffef\034\uffef\035\uffef\036\uffef\040\uffef\043\uffef" +
    "\045\uffef\046\uffef\052\uffef\001\002\000\020\002\ufff3\033" +
    "\ufff3\035\ufff3\040\ufff3\045\ufff3\046\ufff3\052\ufff3\001\002" +
    "\000\032\002\uffeb\012\112\017\uffeb\033\uffeb\034\uffeb\035" +
    "\uffeb\036\uffeb\040\uffeb\043\uffeb\045\uffeb\046\uffeb\052\uffeb" +
    "\001\002\000\004\053\136\001\002\000\010\011\ufff6\012" +
    "\012\053\ufff6\001\002\000\004\045\137\001\002\000\004" +
    "\053\140\001\002\000\006\011\ufff5\045\010\001\002\000" +
    "\004\011\142\001\002\000\016\010\005\033\ufffe\035\ufffe" +
    "\040\ufffe\045\ufffe\046\ufffe\001\002\000\014\033\037\035" +
    "\031\040\036\045\034\046\027\001\002\000\016\033\037" +
    "\035\031\040\036\045\034\046\027\052\145\001\002\000" +
    "\016\033\ufff7\035\ufff7\040\ufff7\045\ufff7\046\ufff7\051\ufff7" +
    "\001\002\000\014\033\037\035\031\040\036\045\034\046" +
    "\027\001\002\000\026\002\ufff1\033\ufff1\034\ufff1\035\ufff1" +
    "\036\ufff1\040\ufff1\043\ufff1\045\ufff1\046\ufff1\052\ufff1\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\145\000\006\002\005\003\003\001\001\000\004\004" +
    "\022\001\001\000\004\006\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\021\001\001\000\002\001\001" +
    "\000\016\005\027\010\032\012\025\013\023\014\034\020" +
    "\031\001\001\000\002\001\001\000\006\006\134\011\133" +
    "\001\001\000\002\001\001\000\010\015\132\017\110\020" +
    "\042\001\001\000\012\012\131\013\023\014\034\020\031" +
    "\001\001\000\012\016\123\017\124\020\042\021\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\016\043\017" +
    "\046\020\042\021\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\017\105\020\042\001\001" +
    "\000\002\001\001\000\006\017\051\020\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\102\020\042" +
    "\001\001\000\006\017\101\020\042\001\001\000\006\017" +
    "\100\020\042\001\001\000\006\017\077\020\042\001\001" +
    "\000\006\017\076\020\042\001\001\000\006\017\075\020" +
    "\042\001\001\000\006\017\074\020\042\001\001\000\006" +
    "\017\073\020\042\001\001\000\002\001\001\000\006\017" +
    "\072\020\042\001\001\000\006\017\071\020\042\001\001" +
    "\000\006\017\070\020\042\001\001\000\006\017\067\020" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\012\104\013\023\014\034\020\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\107\017\110\020" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\113\020\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\017\046\020\042\021\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\121\017\110\020\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\012" +
    "\126\013\023\014\034\020\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\134\011\140\001" +
    "\001\000\002\001\001\000\004\003\142\001\001\000\014" +
    "\005\143\012\025\013\023\014\034\020\031\001\001\000" +
    "\012\012\131\013\023\014\034\020\031\001\001\000\002" +
    "\001\001\000\012\012\146\013\023\014\034\020\031\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public Program getTree() throws java.lang.Exception {
		Symbol s = parse();
		return (Program)(s.value);
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // funcall ::= ID DOUBLARROW exprlist RBRACK 
            {
              FunCallExpr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprList el = (ExprList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunCallExpr(i, el); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcall",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= funcall 
            {
              Expr RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunCallExpr fc = (FunCallExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= ID 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Id(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= NUMBER 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Num(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= FALSE 
            {
              Expr RESULT =null;
		 RESULT = new False(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= TRUE 
            {
              Expr RESULT =null;
		 RESULT = new True(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= expr OR expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Or(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= expr AND expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new And(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= NOT expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= expr GEQ expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterEqual(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= expr GREATER expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterThan(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= expr LEQ expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessEqual(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= expr LESSER expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessThan(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= expr NEQ expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotEqual(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= expr EQ expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Equal(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr DIV expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Div(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= expr TIMES expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Times(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= expr MINUS expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Minus(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= expr PLUS expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Plus(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exprlist ::= exprlist COMMA expr 
            {
              ExprList RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprList el = (ExprList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 el.add(e); RESULT = el; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprlist",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exprlist ::= expr 
            {
              ExprList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprList(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprlist",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // gcommand ::= expr RARROW stmt 
            {
              GCommand RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CompoundStmt s = (CompoundStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GCommand(e, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("gcommand",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // glist ::= glist BOX gcommand 
            {
              GuardList RESULT =null;
		int glleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int glright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GuardList gl = (GuardList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int gcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GCommand gc = (GCommand)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 gl.add(gc); RESULT = gl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("glist",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // glist ::= gcommand 
            {
              GuardList RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GCommand g = (GCommand)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GuardList(g); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("glist",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // destlist ::= destlist COMMA ID 
            {
              DestList RESULT =null;
		int dlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DestList dlist = (DestList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 dlist.add(new Id(i)); RESULT = dlist; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("destlist",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // destlist ::= ID 
            {
              DestList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DestList(new Id(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("destlist",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // simple ::= funcall 
            {
              Stmt RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunCallExpr fc = (FunCallExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunCallStmt(fc.name, new ExprList(fc)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // simple ::= DISPLAY exprlist 
            {
              Stmt RESULT =null;
		int elistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprList elist = (ExprList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Display(elist); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // simple ::= SKIP 
            {
              Stmt RESULT =null;
		 RESULT = new Skip(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // simple ::= DO glist OD 
            {
              Stmt RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GuardList g = (GuardList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Do(g); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // simple ::= IF expr THEN stmt FI 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CompoundStmt s = (CompoundStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfThen(e, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // simple ::= IF glist FI 
            {
              Stmt RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GuardList g = (GuardList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(g); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // simple ::= destlist LARROW exprlist 
            {
              Stmt RESULT =null;
		int dlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DestList dlist = (DestList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprList elist = (ExprList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Assign(dlist, elist); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= simple SEMICOLON stmt 
            {
              CompoundStmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CompoundStmt st = (CompoundStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CompoundStmt(s, st); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= simple 
            {
              CompoundStmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CompoundStmt(s, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // body ::= body stmt 
            {
              StmtList RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StmtList b = (StmtList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CompoundStmt s = (CompoundStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 b.add(s); RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // body ::= stmt 
            {
              StmtList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CompoundStmt s = (CompoundStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StmtList(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // opt_vlist ::= 
            {
              DeclList RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_vlist",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // opt_vlist ::= decl_list 
            {
              DeclList RESULT =null;
		int dlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclList dlist = (DeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = dlist; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_vlist",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fundef ::= FUN opt_vlist DOUBLARROW ID DOUBLARROW opt_vlist RBRACK decl body NUF 
            {
              FunDef RESULT =null;
		int olist1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int olist1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		DeclList olist1 = (DeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int olist2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int olist2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DeclList olist2 = (DeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DeclList vars = (DeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int instructsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instructsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StmtList instructs = (StmtList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunDef(olist1, i, olist2, vars, instructs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fundef",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // funs ::= 
            {
              FunList RESULT =null;
		 RESULT = new FunList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funs",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funs ::= funs fundef 
            {
              FunList RESULT =null;
		int flistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int flistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunList flist = (FunList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fdefleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdefright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunDef fdef = (FunDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 flist.add(fdef); RESULT = flist; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funs",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= BOOL 
            {
              Type RESULT =null;
		 RESULT = new BoolType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // type ::= INT 
            {
              Type RESULT =null;
		 RESULT = new IntType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl_list ::= decl_list COMMA ID COLON type 
            {
              DeclList RESULT =null;
		int dlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DeclList dlist = (DeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 dlist.add(new VarDecl(i, t)); RESULT = dlist; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl_list ::= ID COLON type 
            {
              DeclList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclList(new VarDecl(i, t)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decl ::= 
            {
              DeclList RESULT =null;
		 RESULT = new DeclList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // decl ::= LBRACK decl_list RBRACK 
            {
              DeclList RESULT =null;
		int dlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclList dlist = (DeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = dlist; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= decl funs body 
            {
              Program RESULT =null;
		int globalVarsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int globalVarsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DeclList globalVars = (DeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunList fs = (FunList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmtList b = (StmtList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(globalVars, fs, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

